/*
 *  Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/dme/aseries/client/client.go
//
// Generated by this command:
//
//	mockgen -source ./storage/dme/aseries/client/client.go -package mock_client -destination ./test/mocks/mock_client/dme.go DMEASeriesClientInterface
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	client "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/dme/aseries/client"
	gomock "go.uber.org/mock/gomock"
)

// MockDMEASeriesClientInterface is a mock of DMEASeriesClientInterface interface.
type MockDMEASeriesClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDMEASeriesClientInterfaceMockRecorder
	isgomock struct{}
}

// MockDMEASeriesClientInterfaceMockRecorder is the mock recorder for MockDMEASeriesClientInterface.
type MockDMEASeriesClientInterfaceMockRecorder struct {
	mock *MockDMEASeriesClientInterface
}

// NewMockDMEASeriesClientInterface creates a new mock instance.
func NewMockDMEASeriesClientInterface(ctrl *gomock.Controller) *MockDMEASeriesClientInterface {
	mock := &MockDMEASeriesClientInterface{ctrl: ctrl}
	mock.recorder = &MockDMEASeriesClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDMEASeriesClientInterface) EXPECT() *MockDMEASeriesClientInterfaceMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockDMEASeriesClientInterface) Call(ctx context.Context, method, url string, data any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, method, url, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) Call(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).Call), ctx, method, url, data)
}

// CreateFileSystem mocks base method.
func (m *MockDMEASeriesClientInterface) CreateFileSystem(ctx context.Context, params *client.CreateFilesystemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) CreateFileSystem(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).CreateFileSystem), ctx, params)
}

// DeleteDataTurboShare mocks base method.
func (m *MockDMEASeriesClientInterface) DeleteDataTurboShare(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataTurboShare", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataTurboShare indicates an expected call of DeleteDataTurboShare.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) DeleteDataTurboShare(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataTurboShare", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).DeleteDataTurboShare), ctx, id)
}

// DeleteFileSystem mocks base method.
func (m *MockDMEASeriesClientInterface) DeleteFileSystem(ctx context.Context, fsID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", ctx, fsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) DeleteFileSystem(ctx, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).DeleteFileSystem), ctx, fsID)
}

// DeleteNfsShare mocks base method.
func (m *MockDMEASeriesClientInterface) DeleteNfsShare(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShare", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShare indicates an expected call of DeleteNfsShare.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) DeleteNfsShare(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNfsShare", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).DeleteNfsShare), ctx, id)
}

// GetBackendID mocks base method.
func (m *MockDMEASeriesClientInterface) GetBackendID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBackendID indicates an expected call of GetBackendID.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetBackendID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendID", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetBackendID))
}

// GetDataTurboShareByPath mocks base method.
func (m *MockDMEASeriesClientInterface) GetDataTurboShareByPath(ctx context.Context, path string) (*client.DataTurboShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTurboShareByPath", ctx, path)
	ret0, _ := ret[0].(*client.DataTurboShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataTurboShareByPath indicates an expected call of GetDataTurboShareByPath.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetDataTurboShareByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTurboShareByPath", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetDataTurboShareByPath), ctx, path)
}

// GetDataTurboUserByName mocks base method.
func (m *MockDMEASeriesClientInterface) GetDataTurboUserByName(ctx context.Context, name string) (*client.DataTurboAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTurboUserByName", ctx, name)
	ret0, _ := ret[0].(*client.DataTurboAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataTurboUserByName indicates an expected call of GetDataTurboUserByName.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetDataTurboUserByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTurboUserByName", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetDataTurboUserByName), ctx, name)
}

// GetDeviceSN mocks base method.
func (m *MockDMEASeriesClientInterface) GetDeviceSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceSN indicates an expected call of GetDeviceSN.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetDeviceSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSN", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetDeviceSN))
}

// GetFileSystemByID mocks base method.
func (m *MockDMEASeriesClientInterface) GetFileSystemByID(ctx context.Context, fsID string) (*client.FileSystemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByID", ctx, fsID)
	ret0, _ := ret[0].(*client.FileSystemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByID indicates an expected call of GetFileSystemByID.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetFileSystemByID(ctx, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemByID", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetFileSystemByID), ctx, fsID)
}

// GetFileSystemByName mocks base method.
func (m *MockDMEASeriesClientInterface) GetFileSystemByName(ctx context.Context, name string) (*client.FileSystemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByName", ctx, name)
	ret0, _ := ret[0].(*client.FileSystemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByName indicates an expected call of GetFileSystemByName.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetFileSystemByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemByName", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetFileSystemByName), ctx, name)
}

// GetHyperScalePoolByName mocks base method.
func (m *MockDMEASeriesClientInterface) GetHyperScalePoolByName(ctx context.Context, name string) (*client.HyperScalePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHyperScalePoolByName", ctx, name)
	ret0, _ := ret[0].(*client.HyperScalePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHyperScalePoolByName indicates an expected call of GetHyperScalePoolByName.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetHyperScalePoolByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHyperScalePoolByName", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetHyperScalePoolByName), ctx, name)
}

// GetHyperScalePools mocks base method.
func (m *MockDMEASeriesClientInterface) GetHyperScalePools(ctx context.Context) ([]*client.HyperScalePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHyperScalePools", ctx)
	ret0, _ := ret[0].([]*client.HyperScalePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHyperScalePools indicates an expected call of GetHyperScalePools.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetHyperScalePools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHyperScalePools", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetHyperScalePools), ctx)
}

// GetNfsShareByPath mocks base method.
func (m *MockDMEASeriesClientInterface) GetNfsShareByPath(ctx context.Context, path string) (*client.NfsShareInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareByPath", ctx, path)
	ret0, _ := ret[0].(*client.NfsShareInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareByPath indicates an expected call of GetNfsShareByPath.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetNfsShareByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareByPath", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetNfsShareByPath), ctx, path)
}

// GetStorageID mocks base method.
func (m *MockDMEASeriesClientInterface) GetStorageID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStorageID indicates an expected call of GetStorageID.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetStorageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageID", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetStorageID))
}

// GetTaskInfos mocks base method.
func (m *MockDMEASeriesClientInterface) GetTaskInfos(ctx context.Context, taskID string) ([]*client.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskInfos", ctx, taskID)
	ret0, _ := ret[0].([]*client.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskInfos indicates an expected call of GetTaskInfos.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) GetTaskInfos(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskInfos", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).GetTaskInfos), ctx, taskID)
}

// Login mocks base method.
func (m *MockDMEASeriesClientInterface) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).Login), ctx)
}

// Logout mocks base method.
func (m *MockDMEASeriesClientInterface) Logout(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx)
}

// Logout indicates an expected call of Logout.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).Logout), ctx)
}

// ReLogin mocks base method.
func (m *MockDMEASeriesClientInterface) ReLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) ReLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReLogin", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).ReLogin), ctx)
}

// SetSystemInfo mocks base method.
func (m *MockDMEASeriesClientInterface) SetSystemInfo(ctx context.Context, sn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSystemInfo", ctx, sn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSystemInfo indicates an expected call of SetSystemInfo.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) SetSystemInfo(ctx, sn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSystemInfo", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).SetSystemInfo), ctx, sn)
}

// UpdateFileSystem mocks base method.
func (m *MockDMEASeriesClientInterface) UpdateFileSystem(ctx context.Context, fsID string, params *client.UpdateFileSystemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystem", ctx, fsID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) UpdateFileSystem(ctx, fsID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystem", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).UpdateFileSystem), ctx, fsID, params)
}

// ValidateLogin mocks base method.
func (m *MockDMEASeriesClientInterface) ValidateLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLogin indicates an expected call of ValidateLogin.
func (mr *MockDMEASeriesClientInterfaceMockRecorder) ValidateLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLogin", reflect.TypeOf((*MockDMEASeriesClientInterface)(nil).ValidateLogin), ctx)
}
